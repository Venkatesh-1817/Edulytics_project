CREATE OR REPLACE TABLE GOLD.LEADERBOARD (
  STUDENT_ID INTEGER PRIMARY KEY,
  TOTAL_WATCH_TIME FLOAT
);

CREATE OR REPLACE PROCEDURE GOLD.UPDATE_LEADERBOARD()
RETURNS STRING
LANGUAGE JAVASCRIPT
AS
$$
try {
    var merge_sql = `
        MERGE INTO GOLD.LEADERBOARD tgt
        USING (
            SELECT STUDENT_ID, SUM(TOTAL_TIME_SPENT) AS TOTAL_WATCH_TIME
            FROM GOLD.FACT_ENGAGEMENT_SUMMARY
            GROUP BY STUDENT_ID
        ) src
        ON tgt.STUDENT_ID = src.STUDENT_ID
        WHEN MATCHED THEN
            UPDATE SET TOTAL_WATCH_TIME = src.TOTAL_WATCH_TIME
        WHEN NOT MATCHED THEN
            INSERT (STUDENT_ID, TOTAL_WATCH_TIME) VALUES (src.STUDENT_ID, src.TOTAL_WATCH_TIME)
    `;
    snowflake.execute({sqlText: merge_sql});
    return "✅ Leaderboard updated successfully!";
} catch (err) {
    return "❌ Failed to update leaderboard: " + err;
}
$$;

CREATE OR REPLACE FUNCTION GOLD.GET_STUDENT_PROFILE(STU_ID INTEGER)
RETURNS TABLE (
    STUDENT_ID INTEGER,
    NAME STRING,
    EMAIL STRING,
    LOCATION STRING,
    SIGNUP_DATE DATE,
    COURSE_NAME STRING,
    CATEGORY STRING,
    INSTRUCTOR STRING,
    COURSE_DURATION INTEGER,
    ENROLLMENT_DATE DATE,
    TOTAL_TIME_SPENT BIGINT,
    ACTIVITY_COUNT BIGINT,
    ENGAGEMENT_SCORE BIGINT,
    LAST_ACTIVITY TIMESTAMP,
    DAYS_INACTIVE INTEGER,
    STATUS STRING
)
AS
$$
    SELECT 
        s.STUDENT_ID,
        s.NAME,
        s.EMAIL,
        s.LOCATION,
        s.SIGNUP_DATE,
        c.COURSE_NAME,
        c.CATEGORY,
        c.INSTRUCTOR,
        c.COURSE_DURATION,
        e.ENROLLMENT_DATE,
        f.TOTAL_TIME_SPENT,
        f.ACTIVITY_COUNT,
        f.ENGAGEMENT_SCORE,
        f.LAST_ACTIVITY,
        f.DAYS_INACTIVE,
        f.STATUS
    FROM GOLD.DIM_STUDENT s
    LEFT JOIN GOLD.FACT_ENROLLMENT e 
        ON s.STUDENT_ID = CAST(e.STUDENT_ID AS INTEGER)
    LEFT JOIN GOLD.DIM_COURSE c 
        ON CAST(e.COURSE_ID AS INTEGER) = c.COURSE_ID
    LEFT JOIN GOLD.FACT_ENGAGEMENT_SUMMARY f 
        ON s.STUDENT_ID = f.STUDENT_ID 
        AND CAST(e.COURSE_ID AS INTEGER) = f.COURSE_ID
    WHERE s.STUDENT_ID = STU_ID
$$;

CREATE OR REPLACE FUNCTION GET_TOP_STUDENTS()
RETURNS TABLE (
    STUDENT_NAME STRING,
    TOTAL_TIME_SPENT BIGINT,
    ENGAGEMENT_SCORE NUMBER(38,6),
    ACTIVITY_COUNT BIGINT
)
LANGUAGE SQL
AS
$$
    SELECT 
        S.NAME AS STUDENT_NAME,
        SUM(F.TOTAL_TIME_SPENT) AS TOTAL_TIME_SPENT,
        AVG(F.ENGAGEMENT_SCORE) AS ENGAGEMENT_SCORE,
        SUM(F.ACTIVITY_COUNT) AS ACTIVITY_COUNT
    FROM GOLD.FACT_ENGAGEMENT_SUMMARY F
    JOIN GOLD.DIM_STUDENT S ON S.STUDENT_ID = F.STUDENT_ID
    WHERE S.STUDENT_IS_CURRENT = TRUE
    GROUP BY S.NAME
    ORDER BY ENGAGEMENT_SCORE DESC
    LIMIT 10
$$;

-- Corrected version - eliminates duplicate counting and unnecessary complexity
CREATE OR REPLACE FUNCTION GET_INSTRUCTOR_LEADERBOARD()
RETURNS TABLE (
    INSTRUCTOR STRING,
    TOTAL_STUDENTS INT,
    TOTAL_SCORE NUMBER(38,6),
    TOTAL_TIME BIGINT,
    ACTIVITIES BIGINT
)
LANGUAGE SQL
AS
$$
    SELECT 
        C.INSTRUCTOR,
        COUNT(DISTINCT F.STUDENT_ID) AS TOTAL_STUDENTS,
        SUM(F.ENGAGEMENT_SCORE) AS TOTAL_SCORE,
        SUM(F.TOTAL_TIME_SPENT) AS TOTAL_TIME,
        SUM(F.ACTIVITY_COUNT) AS ACTIVITIES
    FROM GOLD.FACT_ENGAGEMENT_SUMMARY F
    JOIN GOLD.DIM_COURSE C 
        ON C.COURSE_ID = F.COURSE_ID
    WHERE C.COURSE_IS_CURRENT = TRUE
    GROUP BY C.INSTRUCTOR
    ORDER BY TOTAL_SCORE DESC
    LIMIT 10
$$;